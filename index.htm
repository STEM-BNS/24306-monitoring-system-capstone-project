<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>24306-project</title>
  <style>
    /* Base Styles (for larger screens) */
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
      background: #f3f5f9;
      scroll-behavior: smooth;
    }

    .container {
      display: flex;
      flex-direction: row; /* Default: side by side layout */
      width: 100%;
    }

    /* Left Panel (Graphs) */
    .left-panel {
      width: 60%; /* Now this takes up 60% for the graphs */
      padding: 20px;
      display: flex;
      flex-direction: column;
    }

    /* Graphs section adjustments */
    .sensor-section {
      padding: 20px;
      margin: 10px 0;
      background-color: #f3f5f9;
      border-radius: 10px;
      text-align: center;
    }

    .sensor-section canvas {
      width: 100%;
      height: 250px;
    }

    /* Right Panel (Sensor Data Boxes) */
    .right-panel {
      width: 40%; /* This now takes up 40% for the sensor data */
      padding: 20px;
      background-color: #f3f5f9;
      box-shadow: 2px 0px 10px rgba(0, 0, 0, 0.1);
      text-align: center;
    }

    /* Sensor Boxes */
    .sensor-box {
      height: 150px;
      padding: 40px 20px;
      font-size: 40px;
      color: white;
      border-radius: 30px;
      display: flex;
      justify-content: center;
      align-items: center;
      margin-bottom: 20px;
    }

    .lm35 { background: #a8d5ba; }
    .ir-module { background: #87bfc0; }
    .max30102 { background: #587b8c; }
    .mpu6050 { background: #adbcc3; }

    /* New Styles for Poster and Portfolio */
    .icons {
      display: flex;
      flex-direction: column;
      align-items: center;
      margin-top: 30px;
    }

    .icons a {
      margin: 20px 0;
      text-align: center;
    }

    .icons img {
      width: 100%;
      max-width: 350px; /* Adjust image size */
      height: auto;
      margin-bottom: 10px;
      transition: transform 0.3s ease;
    }

    .icons img:hover {
      transform: scale(1.1);
    }

    .icons .text {
      font-size: 18px;
      font-weight: 500;
      color: #333;
    }

    /* Mobile View (Adjustments) */
    @media only screen and (max-width: 480px) {
      /* Stack the container items */
      .container {
        flex-direction: column; /* Stack vertically for mobile */
      }

      /* Make left panel (graphs)*/
      .left-panel {
        width: 90%;
        margin-bottom: 20px; /* Space between panels */
      }

      /* Make right panel (sensor data) */
      .right-panel {
        width: 100%;
      }

      /* Graphs section adjustments */
      .sensor-section {
        padding: 20px;
        margin: 10px 0;
      }

      .sensor-section canvas {
        width: 90%;
        height: 250px; /* Adjust the height for mobile view */
      }

      /* Adjust icon images */
      .icons img {
        width: 90%;
        max-width: 350px; /* Limit size of images */
        margin-bottom: 20px;
      }

      /* Adjust text */
      .title {
        font-size: 28px; /* Smaller text for smaller screens */
      }

      /* Adjust sensor box sizes for mobile */
      .sensor-box {
        font-size: 30px;
        height: auto;
        padding: 20px;
        margin-bottom: 15px;
      }

      /* Adjust Poster and Portfolio to be under the graphs */
      .icons {
        margin-top: 20px; /* Ensure the space between the graphs and icons */
      }
    }

    /* Loading Screen */
    :root {
      --border-width: 7px;
    }

    * {
      margin: 0;
      padding: 0;
    }

    body {
      background-color: #f3f5f9;
    }

    .sec-loading {
      height: 100vh;
      width: 100vw;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .sec-loading .one {
      height: 80px;
      width: 80px;
      border: var(--border-width) solid white;
      transform: rotate(45deg);
      border-radius: 0 50% 50% 50%;
      position: relative;
      animation: move 0.5s linear infinite alternate-reverse;
    }

    .sec-loading .one::before {
      content: "";
      position: absolute;
      height: 55%;
      width: 55%;
      border-radius: 50%;
      border: var(--border-width) solid transparent;
      border-top-color: white;
      border-bottom-color: white;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      animation: rotate 1s linear infinite;
    }

    @keyframes rotate {
      to {
        transform: translate(-50%, -50%) rotate(360deg);
      }
    }

    @keyframes move {
      to {
        transform: translateY(15px) rotate(45deg);
      }
    }

    /* Form Section for Name, Title and ESP32 IP */
    .form-section {
      display: flex;
      justify-content: center;
      align-items: center;
      flex-direction: column;
      height: 100vh;
      background-color: #fff;
      padding: 20px;
    }

    .form-section input {
      margin: 10px;
      padding: 10px;
      font-size: 18px;
      width: 300px;
      border: 2px solid #ddd;
      border-radius: 5px;
    }

    .form-section button {
      padding: 10px 20px;
      background-color: #4c66af;
      color: white;
      border: none;
      font-size: 16px;
      border-radius: 5px;
      cursor: pointer;
      margin-top: 20px;
    }

    .form-section button:hover {
      background-color: #4645a0;
    }

  </style>
</head>
<body>

  <!-- Form for Name, Title, and ESP32 IP -->
  <div class="form-section" id="nameTitleSection">
    <input type="text" id="userName" placeholder="Enter your name" />
    <input type="text" id="projectTitle" placeholder="Enter project title" />
    <input type="text" id="esp32IP" placeholder="Enter ESP32 IP Address" />
    <button id="saveButton">Save</button>
  </div>

  <!-- Loading Screen -->
  <div class="sec-loading" style="display: none;">
    <div class="one"></div>
  </div>

  <!-- Main Content -->
  <div class="container" style="display: none;">
    <!-- Left Panel with Sensor Data -->
    <div class="left-panel">
      <img src="https://i.imgur.com/JkYtSXf.png" alt="Doctor Photo">
      <div class="text"></div>
      <h1 class="title">Non-Invasive Glucose Monitoring with ESP32 and Integrated Biometric Sensors</h1>
      <div class="sensor-box lm35" id="temperature">Temperature: --</div>
      <div class="sensor-box ir-module" id="ir-value">Glucose: --</div>
      <div class="sensor-box max30102" id="bpm">BPM: --</div>
      <div class="sensor-box mpu6050" id="fallDetected">Fall Detection: --</div> <!-- Moved this box under the BPM box -->

      <!-- New poster and portfolio section -->
      <div class="icons">
        <!-- Poster Image -->
        <a href="https://drive.google.com/uc?export=download&id=1UydiWayBytlnzu6DAGWC6MhEkqnrNrs0" target="_blank">
          <img src="https://i.imgur.com/tpjMjKo.png" alt="Poster Image">
          <div class="text">Download Poster</div>
        </a>

        <!-- Portfolio Image -->
        <a href="https://drive.google.com/uc?export=download&id=1EIM2GKvtwz7Eq_q7E5LtKdY9aWgjKr3U" target="_blank">
          <img src="https://i.imgur.com/PCf1ne2.png" alt="Portfolio Folder">
          <div class="text">Download Portfolio</div>
        </a>
      </div>
    </div>

    <!-- Right Panel with Graphs -->
    <div class="right-panel">
      <!-- Section for LM35 Graph -->
      <div class="sensor-section" id="sensor1">
        <h2>LM35 Temperature Sensor Graph (Â°C)</h2>
        <canvas id="lm35Graph"></canvas>
      </div>

      <!-- Section for IR Sensor Graph -->
      <div class="sensor-section" id="sensor2">
        <h2>IR Sensor Glucose Graph (MG/DL)</h2>
        <canvas id="irGraph"></canvas>
      </div>

      <!-- Section for MAX30102 Graph -->
      <div class="sensor-section" id="sensor3">
        <h2>MAX30102 BPM Graph (BPM)</h2>
        <canvas id="max30102Graph"></canvas>
      </div>

    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

  <script>
// Function to validate the IP address
function isValidIP(ip) {
  const ipPattern = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;
  return ipPattern.test(ip);
}

// Handling the Save Button and Page Transition
document.getElementById("saveButton").addEventListener("click", function () {
  const userName = document.getElementById("userName").value;
  const projectTitle = document.getElementById("projectTitle").value;
  const esp32IP = document.getElementById("esp32IP").value;

  // Check if the IP is valid
  if (!isValidIP(esp32IP)) {
    alert("Please enter a valid IP address!");
    return; // Prevent further actions if the IP is invalid
  }

  if (userName && projectTitle && esp32IP) {
    document.getElementById("nameTitleSection").style.display = "none";
    document.querySelector(".sec-loading").style.display = "flex"; // Show loading screen
    setTimeout(function () {
      document.querySelector(".sec-loading").style.display = "none"; // Hide loading screen
      document.querySelector(".container").style.display = "flex"; // Show main content

      // Start fetching data and updating graphs
      startDataFetching(esp32IP);
    }, 2000); // 2-second delay before showing the main content
  } else {
    alert("Please enter all fields!");
  }
});

// Function to fetch sensor data periodically
function startDataFetching(ip) {
  const url = `http://${ip}/sensorData`; // Endpoint to fetch data from ESP32

  function fetchData() {
    fetch(url)
      .then((response) => response.json())
      .then((data) => {
        // Update sensor data on the page
        document.getElementById("temperature").innerText = `Temperature: ${data.temperature} Â°C`;
        document.getElementById("ir-value").innerText = `IR Sensor: ${data.irSensor} MG/DL`;
        document.getElementById("bpm").innerText = `BPM: ${data.bpm}`;
        document.getElementById("fallDetected").innerText = `Fall Detection: ${data.fallDetected ? "Yes" : "No"}`;

        // Update the graphs with the fetched data
        updateGraphs(data);
      })
      .catch((error) => {
        console.error("Error fetching sensor data:", error);
      });
  }

  // Fetch data immediately, then every 2 seconds
  fetchData();
  setInterval(fetchData, 2000);
}

// Update Graphs with Data from ESP32
function updateGraphs(data) {
  const currentTime = new Date().toLocaleTimeString();

  // Update LM35 Graph
  if (lm35Chart.data.labels.length > 10) lm35Chart.data.labels.shift(); // Keep only last 10 points
  if (lm35Chart.data.datasets[0].data.length > 10) lm35Chart.data.datasets[0].data.shift();
  lm35Chart.data.labels.push(currentTime);
  lm35Chart.data.datasets[0].data.push(data.temperature);
  lm35Chart.update();

  // Update IR Sensor Graph
  if (irChart.data.labels.length > 10) irChart.data.labels.shift();
  if (irChart.data.datasets[0].data.length > 10) irChart.data.datasets[0].data.shift();
  irChart.data.labels.push(currentTime);
  irChart.data.datasets[0].data.push(data.irSensor);
  irChart.update();

  // Update MAX30102 BPM Graph
  if (max30102Chart.data.labels.length > 10) max30102Chart.data.labels.shift();
  if (max30102Chart.data.datasets[0].data.length > 10) max30102Chart.data.datasets[0].data.shift();
  max30102Chart.data.labels.push(currentTime);
  max30102Chart.data.datasets[0].data.push(data.bpm);
  max30102Chart.update();
}

// Initialize the charts using Chart.js
const ctx1 = document.getElementById("lm35Graph").getContext("2d");
const lm35Chart = new Chart(ctx1, {
  type: "line",
  data: {
    labels: [],
    datasets: [
      {
        label: "LM35 Temperature (Â°C)",
        data: [],
        borderColor: "rgba(75, 192, 192, 1)",
        borderWidth: 1,
        fill: false,
      },
    ],
  },
  options: {
    responsive: true,
    scales: {
      x: {
        beginAtZero: true,
      },
    },
  },
});

// IR Sensor Graph
const ctx2 = document.getElementById("irGraph").getContext("2d");
const irChart = new Chart(ctx2, {
  type: "line",
  data: {
    labels: [],
    datasets: [
      {
        label: "IR Sensor (MG/DL)",
        data: [],
        borderColor: "rgba(153, 102, 255, 1)",
        borderWidth: 1,
        fill: false,
      },
    ],
  },
  options: {
    responsive: true,
    scales: {
      x: {
        beginAtZero: true,
      },
    },
  },
});

// MAX30102 BPM Graph
const ctx3 = document.getElementById("max30102Graph").getContext("2d");
const max30102Chart = new Chart(ctx3, {
  type: "line",
  data: {
    labels: [],
    datasets: [
      {
        label: "BPM (Beats per Minute)",
        data: [],
        borderColor: "rgba(255, 99, 132, 1)",
        borderWidth: 1,
        fill: false,
      },
    ],
  },
  options: {
    responsive: true,
    scales: {
      x: {
        beginAtZero: true,
      },
    },
  },
});


</script>

</body>
</html>